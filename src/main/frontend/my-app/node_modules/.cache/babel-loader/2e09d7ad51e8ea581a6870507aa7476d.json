{"ast":null,"code":"var _jsxFileName = \"/Users/ajor/Desktop/pcr/src/main/frontend/my-app/src/context/ThemeContext.tsx\";\n// src/context/ThemeContext.tsx\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nconst DEFAULT_PRIMARY_COLOR = \"#1ABC9C\";\nconst ThemeContext = createContext(null);\nexport const ThemeProvider = ({\n  children\n}) => {\n  const [primaryColor, setPrimaryColor] = useState(DEFAULT_PRIMARY_COLOR);\n  const [logoUrl, setLogoUrl] = useState(null);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const storedColor = localStorage.getItem(\"primaryColor\");\n    const storedLogo = localStorage.getItem(\"logoUrl\");\n    if (storedColor) setPrimaryColor(storedColor);\n    if (storedLogo) setLogoUrl(storedLogo);\n  }, []);\n\n  // Update CSS variable when primary color changes\n  useEffect(() => {\n    document.documentElement.style.setProperty(\"--tw-prose-links\", primaryColor);\n  }, [primaryColor]);\n  const updateTheme = (color, logo) => {\n    setPrimaryColor(color);\n    setLogoUrl(logo);\n    localStorage.setItem(\"primaryColor\", color);\n    if (logo) {\n      localStorage.setItem(\"logoUrl\", logo);\n    } else {\n      localStorage.removeItem(\"logoUrl\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      primaryColor,\n      logoUrl,\n      updateTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useTheme = () => {\n  const ctx = useContext(ThemeContext);\n  if (!ctx) throw new Error(\"useTheme must be used within ThemeProvider\");\n  return ctx;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","DEFAULT_PRIMARY_COLOR","ThemeContext","ThemeProvider","children","primaryColor","setPrimaryColor","logoUrl","setLogoUrl","storedColor","localStorage","getItem","storedLogo","document","documentElement","style","setProperty","updateTheme","color","logo","setItem","removeItem","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTheme","ctx","Error"],"sources":["/Users/ajor/Desktop/pcr/src/main/frontend/my-app/src/context/ThemeContext.tsx"],"sourcesContent":["// src/context/ThemeContext.tsx\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from \"react\";\n\ninterface ThemeContextType {\n  primaryColor: string;\n  logoUrl: string | null;\n  updateTheme: (color: string, logo: string | null) => void;\n}\n\nconst DEFAULT_PRIMARY_COLOR = \"#1ABC9C\";\n\nconst ThemeContext = createContext<ThemeContextType | null>(null);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [primaryColor, setPrimaryColor] = useState<string>(\n    DEFAULT_PRIMARY_COLOR\n  );\n  const [logoUrl, setLogoUrl] = useState<string | null>(null);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const storedColor = localStorage.getItem(\"primaryColor\");\n    const storedLogo = localStorage.getItem(\"logoUrl\");\n\n    if (storedColor) setPrimaryColor(storedColor);\n    if (storedLogo) setLogoUrl(storedLogo);\n  }, []);\n\n  // Update CSS variable when primary color changes\n  useEffect(() => {\n    document.documentElement.style.setProperty(\n      \"--tw-prose-links\",\n      primaryColor\n    );\n  }, [primaryColor]);\n\n  const updateTheme = (color: string, logo: string | null) => {\n    setPrimaryColor(color);\n    setLogoUrl(logo);\n\n    localStorage.setItem(\"primaryColor\", color);\n    if (logo) {\n      localStorage.setItem(\"logoUrl\", logo);\n    } else {\n      localStorage.removeItem(\"logoUrl\");\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={{ primaryColor, logoUrl, updateTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const ctx = useContext(ThemeContext);\n  if (!ctx) throw new Error(\"useTheme must be used within ThemeProvider\");\n  return ctx;\n};\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IACVC,aAAa,EACbC,UAAU,EACVC,QAAQ,EACRC,SAAS,QAEJ,OAAO;AAQd,MAAMC,qBAAqB,GAAG,SAAS;AAEvC,MAAMC,YAAY,GAAGL,aAAa,CAA0B,IAAI,CAAC;AAMjE,OAAO,MAAMM,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC3E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAC9CE,qBACF,CAAC;EACD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC;;EAE3D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACxD,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAElD,IAAIF,WAAW,EAAEH,eAAe,CAACG,WAAW,CAAC;IAC7C,IAAIG,UAAU,EAAEJ,UAAU,CAACI,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAZ,SAAS,CAAC,MAAM;IACda,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CACxC,kBAAkB,EAClBX,YACF,CAAC;EACH,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMY,WAAW,GAAGA,CAACC,KAAa,EAAEC,IAAmB,KAAK;IAC1Db,eAAe,CAACY,KAAK,CAAC;IACtBV,UAAU,CAACW,IAAI,CAAC;IAEhBT,YAAY,CAACU,OAAO,CAAC,cAAc,EAAEF,KAAK,CAAC;IAC3C,IAAIC,IAAI,EAAE;MACRT,YAAY,CAACU,OAAO,CAAC,SAAS,EAAED,IAAI,CAAC;IACvC,CAAC,MAAM;MACLT,YAAY,CAACW,UAAU,CAAC,SAAS,CAAC;IACpC;EACF,CAAC;EAED,oBACEzB,KAAA,CAAA0B,aAAA,CAACpB,YAAY,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,YAAY;MAAEE,OAAO;MAAEU;IAAY,CAAE;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClE1B,QACoB,CAAC;AAE5B,CAAC;AAED,OAAO,MAAM2B,QAAQ,GAAGA,CAAA,KAAwB;EAC9C,MAAMC,GAAG,GAAGlC,UAAU,CAACI,YAAY,CAAC;EACpC,IAAI,CAAC8B,GAAG,EAAE,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACvE,OAAOD,GAAG;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}